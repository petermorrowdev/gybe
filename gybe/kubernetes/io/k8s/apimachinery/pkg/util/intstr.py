# generated by datamodel-codegen:
#   filename:  v3
#   timestamp: 2022-10-03T01:54:43+00:00

from __future__ import annotations

from typing import Union

from pydantic import BaseModel, Field


class IntOrString(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.',
    )


class IntOrStringModel(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.',
    )


class IntOrStringModel1(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.',
    )


class IntOrStringModel2(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.',
    )


class IntOrStringModel3(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.',
    )
